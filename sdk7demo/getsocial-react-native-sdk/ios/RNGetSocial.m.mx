#import "RNGetSocial.h"
#import <React/RCTConvert.h>
#import <React/RCTLog.h>
#import <GetSocialSDK/GetSocialSDK.h>

#pragma mark - Private RNGetSocial declarations

@interface RNGetSocial()
@end

#pragma mark - RNGetSocial implementation

@implementation RNGetSocial
{
    bool hasListeners;
}

RCT_EXPORT_MODULE()

- (instancetype)init {
    self = [super init];
    if (self) {
        [self setup];
    }
    return self;
}

+ (BOOL)requiresMainQueueSetup {
    return NO;  //run on background thread
}

#pragma mark - Observers

// Will be called when this module's first listener is added.
-(void)startObserving {
    hasListeners = YES;
}

// Will be called when this module's last listener is removed, or on dealloc.
-(void)stopObserving {
    hasListeners = NO;
}

-(void)addListener:(NSString *)eventName {
    [super addListener:eventName];
    // register native listeners here to avoid race conditions

    if ([eventName isEqualToString:@"onInitialized"]) {
        (void)[GetSocialJSONBridge addListener:@"GetSocial.addOnInitializedListener" listener:^(NSString * result) {
            if (self->hasListeners && self.bridge) {
                [self sendEventWithName:@"onInitialized" body: result];
            }
        }];
    }
    if ([eventName isEqualToString:@"onCurrentUserChanged"]) {
        (void)[GetSocialJSONBridge addListener:@"GetSocial.addOnCurrentUserChangedListener" listener:^(NSString * result) {
            if (self->hasListeners && self.bridge) {
                [self sendEventWithName:@"onCurrentUserChanged" body: result];
            }
        }];
    }
    if ([eventName isEqualToString:@"onNotificationReceived"]) {
        (void)[GetSocialJSONBridge addListener:@"Notifications.setOnNotificationReceivedListener" listener:^(NSString * notificationJSON) {
            if (self->hasListeners && self.bridge) {
                [self sendEventWithName:@"onNotificationReceived" body: notificationJSON];
            }
        }];
    }
    if ([eventName isEqualToString:@"onNotificationClicked"]) {
        (void)[GetSocialJSONBridge addListener:@"Notifications.setOnNotificationClickedListener" listener:^(NSString * notificationClickedJSON) {
            if (self->hasListeners && self.bridge) {
                [self sendEventWithName:@"onNotificationClicked" body: notificationClickedJSON];
            }
        }];
    }
    if ([eventName isEqualToString:@"onTokenReceived"]) {
        (void)[GetSocialJSONBridge addListener:@"Notifications.setOnTokenReceivedListener" listener:^(NSString * tokenJSON) {
            if (self->hasListeners && self.bridge) {
                [self sendEventWithName:@"onTokenReceived" body: tokenJSON];
            }
        }];
    }
    if ([eventName isEqualToString:@"onReferralDataReceived"]) {
        (void)[GetSocialJSONBridge addListener:@"Invites.setOnReferralDataReceivedListener" listener:^(NSString * referralDataJSON) {
			if (self->hasListeners && self.bridge) {
                [self sendEventWithName:@"onReferralDataReceived" body: referralDataJSON];
            }
        }];
    }
}

#pragma mark - Constants

- (NSDictionary *)constantsToExport
{
    return @{};
}

#pragma mark - GetSocial methods

RCT_REMAP_METHOD(callSync,
                 callSync:(NSString*)method
                 parameters:(NSString*) parameters
                 resolver:(RCTPromiseResolveBlock)resolve
                 reject:(RCTPromiseRejectBlock)reject) {

    NSString* newParameters = parameters;
    if (newParameters != nil && GetSocial.isInitialized) {
        newParameters = [parameters stringByReplacingOccurrencesOfString:@"GETSOCIAL_CURRENT_USER_PLACEHOLDER_42_42" withString: GetSocial.currentUser.userId];
    }
    NSString* result = [GetSocialJSONBridge callSyncMethod:method with: newParameters];
    resolve(result);
}

RCT_REMAP_METHOD(callAsync,
                 callAsync:(NSString*)method
                 parameters:(NSString*) parameters
                 resolver:(RCTPromiseResolveBlock)resolve
                 reject:(RCTPromiseRejectBlock)reject) {
    NSString* newParameters = parameters;
    if (newParameters != nil && GetSocial.isInitialized) {
        newParameters = [parameters stringByReplacingOccurrencesOfString:@"GETSOCIAL_CURRENT_USER_PLACEHOLDER_42_42" withString: GetSocial.currentUser.userId];
    }

    if ([method isEqualToString:@"Communities.removeActivities"]) {
        newParameters = [newParameters stringByReplacingOccurrencesOfString:@"activityIds" withString:@"ids"];
    }
    [GetSocialJSONBridge callAsyncMethod:method with:newParameters success:^(NSString * result) {
        resolve(result);
    } failure:^(NSString * error) {
        [self invokeReject:reject withErrorMessage:error];
    }];
}


#pragma mark - Supported events
- (NSArray<NSString *> *)supportedEvents {
    return @[
        @"onInitialized",
        @"onCurrentUserChanged",
        @"inviteview_invitesent",
        @"inviteview_invitecancelled",
        @"inviteview_inviteerror",
        @"view_open",
        @"view_close",
        @"activityview_action",
        @"activityview_mentionclick",
        @"activityview_avatarclick",
        @"activityview_mentionclick",
        @"activityview_tagclick",
        @"ncview_notificationclick",
        @"onNotificationReceived",
        @"onNotificationClicked",
        @"onTokenReceived",
        @"onReferralDataReceived",
    ];
}

#pragma mark - Setup
- (void)setup {
}

#pragma mark - Helper methods

RCT_REMAP_METHOD(loadLocalResource,
                 loadLocalResourceWithUri:(NSString*)path
                 resolver:(RCTPromiseResolveBlock)resolve
                 reject:(RCTPromiseRejectBlock)reject) {
    NSData* imageData = [self loadImageFromFile:path];
    NSString *base64Encoded = [imageData base64EncodedStringWithOptions:0];
    resolve(base64Encoded);
}


- (void)fireUIEvent:(NSString*)uiEvent body:(id)body {
	if (self.bridge) {
		dispatch_async(dispatch_get_main_queue(), ^{
			[self sendEventWithName:uiEvent body: body];
		});
	}
}

- (void)fireUIEvent:(NSString*)uiEvent channelId:(NSString*)channelId errorMessage:(NSString*)errorMessage
{
    NSMutableDictionary* eventData = [NSMutableDictionary dictionary];
    eventData[@"channelId"]  = channelId;
    if (errorMessage) {
        eventData[@"error"]  = errorMessage;
    }
	if (self.bridge) {
		[self sendEventWithName: uiEvent body:eventData];
	}
}

- (NSData*) loadImageFromFile:(NSString*)fileUri {
	NSArray<NSString*>* parts = [fileUri componentsSeparatedByString:@"."];
	NSString* imagePath = [[NSBundle mainBundle] pathForResource: parts[0] ofType: parts[1]];
	if ([NSFileManager.defaultManager fileExistsAtPath:imagePath]) {
		return [NSData dataWithContentsOfFile: imagePath];
	}
    NSURL *url = [NSURL URLWithString:fileUri];
    NSData* imageData = [NSData dataWithContentsOfURL:url];
    return imageData;
}

- (void)invokeReject:(RCTPromiseRejectBlock)reject withErrorMessage:(NSString*)errorMessage
{
    NSDictionary* errorDictionary = [NSJSONSerialization JSONObjectWithData: [errorMessage dataUsingEncoding:NSUTF8StringEncoding] options: NSJSONReadingAllowFragments error:nil];
    reject(errorDictionary[@"code"], errorDictionary[@"message"], nil);
}

- (void)invokeReject:(RCTPromiseRejectBlock)reject withError:(NSError*)error {
    NSMutableDictionary* userInfo = [NSMutableDictionary dictionaryWithObject:error.localizedDescription forKey:@"MESSAGE"];
    NSError* errorToReturn = [NSError errorWithDomain:@"GetSocial" code:error.code userInfo:userInfo];
    reject(error.localizedDescription, error.localizedDescription, errorToReturn);
}

@end
